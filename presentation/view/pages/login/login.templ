package pages

import "github/mauljurassicia/nutrifeat/presentation/view/partials/auth"

// Import the necessary React components as standard HTML/CSS.  Since this is Templ,
// we're not directly importing React components, but recreating their visual
// representation and basic functionality with HTML and Templ.
//
// In a real Templ application, you'd likely have a separate system for handling
// interactive elements (like the form submission and toast notifications).  For
// this example, we'll provide basic HTML form handling and placeholder toast
// functionality.
//
// Note:  We're assuming the existence of CSS files (output.css) and a JS file (app.js)
// for styling and basic interactivity.  You'll need to create these files separately
// to match the original React app's appearance and behavior.
//
//  Also, since Templ doesn't have a direct equivalent to React's state management,
//  we'll handle form input with standard HTML form elements.
//
//  For the toast notifications, we'll use a placeholder div.  In a real app,
//  you might use a library like HTMX or create your own JavaScript solution.
templ Login() {


	@auth.AuthLayout(auth.Login) {
		<form class="space-y-4" method="post" action="/login">
			<div>
				<div class="relative">
					//  Use a standard input field.  The 'name' attributes are
					//  important for server-side processing.
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mail absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 h-5 w-5"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22 6 12 13 2 6"></polyline></svg>
					<input
						id="email"
						name="email"
						type="email"
						placeholder="example@gmail.com"
						autocomplete="email"
						required
						class="pl-10 w-full rounded-md border-0 py-1.5 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6"
					/>
				</div>
			</div>
			<div>
				<div class="relative">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-lock absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 h-5 w-5"><rect width="18" height="11" x="3" y="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
					<input
						id="password"
						name="password"
						type="password"
						placeholder="Password"
						autocomplete="current-password"
						required
						class="pl-10 w-full rounded-md border-0 py-1.5 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6"
					/>
				</div>
			</div>
			<div class="flex items-center justify-between">
				<div class="flex items-center space-x-2">
					//  Use a standard checkbox.  The 'name' attribute is important.
					<input
						id="remember"
						name="remember"
						type="checkbox"
						class="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
					/>
					<label
						for="remember"
						class="text-sm font-medium leading-none text-gray-900"
					>
						Remember me
					</label>
				</div>
				<div class="text-sm">
					<a href="#" class="font-medium text-primary hover:text-primary\/80">
						Forgot Password?
					</a>
				</div>
			</div>
			<div>
				<button
					type="submit"
					class="w-full rounded-md bg-primary hover:bg-primary\/90 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm  focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
				>
					Sign in
				</button>
			</div>
		</form>
	}
}
